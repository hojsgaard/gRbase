// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gRbase.h"
#include <RcppEigen.h>
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// order2_
IntegerVector order2_(SEXP x, bool desc);
RcppExport SEXP _gRbase_order2_(SEXP xSEXP, SEXP descSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type desc(descSEXP);
    rcpp_result_gen = Rcpp::wrap(order2_(x, desc));
    return rcpp_result_gen;
END_RCPP
}
// which2_
IntegerVector which2_(const SEXP& x);
RcppExport SEXP _gRbase_which2_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which2_(x));
    return rcpp_result_gen;
END_RCPP
}
// mcsMAT__
SEXP mcsMAT__(SEXP XX_, SEXP OO_);
RcppExport SEXP _gRbase_mcsMAT__(SEXP XX_SEXP, SEXP OO_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type OO_(OO_SEXP);
    rcpp_result_gen = Rcpp::wrap(mcsMAT__(XX_, OO_));
    return rcpp_result_gen;
END_RCPP
}
// moralizeMAT
SEXP moralizeMAT(SEXP XX_);
RcppExport SEXP _gRbase_moralizeMAT(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(moralizeMAT(XX_));
    return rcpp_result_gen;
END_RCPP
}
// rip_internal
List rip_internal(IntegerVector mcs0idx, CharacterVector vn, List cqlist);
static SEXP _gRbase_rip_internal_try(SEXP mcs0idxSEXP, SEXP vnSEXP, SEXP cqlistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type mcs0idx(mcs0idxSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP);
    Rcpp::traits::input_parameter< List >::type cqlist(cqlistSEXP);
    rcpp_result_gen = Rcpp::wrap(rip_internal(mcs0idx, vn, cqlist));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_rip_internal(SEXP mcs0idxSEXP, SEXP vnSEXP, SEXP cqlistSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_rip_internal_try(mcs0idxSEXP, vnSEXP, cqlistSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getCliquesDec__
SEXP getCliquesDec__(SEXP XX_, SEXP mcs0idx_);
static SEXP _gRbase_getCliquesDec___try(SEXP XX_SEXP, SEXP mcs0idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mcs0idx_(mcs0idx_SEXP);
    rcpp_result_gen = Rcpp::wrap(getCliquesDec__(XX_, mcs0idx_));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_getCliquesDec__(SEXP XX_SEXP, SEXP mcs0idx_SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_getCliquesDec___try(XX_SEXP, mcs0idx_SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// topo_sortMAT_
SEXP topo_sortMAT_(SEXP adjmat_);
RcppExport SEXP _gRbase_topo_sortMAT_(SEXP adjmat_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type adjmat_(adjmat_SEXP);
    rcpp_result_gen = Rcpp::wrap(topo_sortMAT_(adjmat_));
    return rcpp_result_gen;
END_RCPP
}
// triang_elo_MAT__
SEXP triang_elo_MAT__(SEXP X_, SEXP ELO_);
RcppExport SEXP _gRbase_triang_elo_MAT__(SEXP X_SEXP, SEXP ELO_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ELO_(ELO_SEXP);
    rcpp_result_gen = Rcpp::wrap(triang_elo_MAT__(X_, ELO_));
    return rcpp_result_gen;
END_RCPP
}
// triang_mcwh_MAT__
SEXP triang_mcwh_MAT__(SEXP adjmat_, SEXP nstates_);
RcppExport SEXP _gRbase_triang_mcwh_MAT__(SEXP adjmat_SEXP, SEXP nstates_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type adjmat_(adjmat_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type nstates_(nstates_SEXP);
    rcpp_result_gen = Rcpp::wrap(triang_mcwh_MAT__(adjmat_, nstates_));
    return rcpp_result_gen;
END_RCPP
}
// cell2entry_
int cell2entry_(const NumericVector& cell, const IntegerVector& dim);
static SEXP _gRbase_cell2entry__try(SEXP cellSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cell2entry_(cell, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_cell2entry_(SEXP cellSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_cell2entry__try(cellSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// make_plevels_
IntegerVector make_plevels_(const IntegerVector& dim);
static SEXP _gRbase_make_plevels__try(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(make_plevels_(dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_make_plevels_(SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_make_plevels__try(dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// entry2cell_
IntegerVector entry2cell_(const int& entry, const IntegerVector& dim);
static SEXP _gRbase_entry2cell__try(SEXP entrySEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int& >::type entry(entrySEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(entry2cell_(entry, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_entry2cell_(SEXP entrySEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_entry2cell__try(entrySEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// next_cell_
NumericVector next_cell_(const NumericVector& cell, const IntegerVector& dim);
static SEXP _gRbase_next_cell__try(SEXP cellSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(next_cell_(cell, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_next_cell_(SEXP cellSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_next_cell__try(cellSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// next_cell2_
void next_cell2_(IntegerVector& cell, const IntegerVector& dim);
static SEXP _gRbase_next_cell2__try(SEXP cellSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< IntegerVector& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    next_cell2_(cell, dim);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_next_cell2_(SEXP cellSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_next_cell2__try(cellSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// next_cell_slice_
NumericVector next_cell_slice_(const NumericVector& cell, const IntegerVector& dim, const IntegerVector& slice_marg);
static SEXP _gRbase_next_cell_slice__try(SEXP cellSEXP, SEXP dimSEXP, SEXP slice_margSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type slice_marg(slice_margSEXP);
    rcpp_result_gen = Rcpp::wrap(next_cell_slice_(cell, dim, slice_marg));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_next_cell_slice_(SEXP cellSEXP, SEXP dimSEXP, SEXP slice_margSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_next_cell_slice__try(cellSEXP, dimSEXP, slice_margSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// slice2entry_
IntegerVector slice2entry_(const IntegerVector& slice_cell, const IntegerVector& slice_marg, const IntegerVector& dim);
static SEXP _gRbase_slice2entry__try(SEXP slice_cellSEXP, SEXP slice_margSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type slice_cell(slice_cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type slice_marg(slice_margSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(slice2entry_(slice_cell, slice_marg, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_slice2entry_(SEXP slice_cellSEXP, SEXP slice_margSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_slice2entry__try(slice_cellSEXP, slice_margSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cell2entry_perm_
int cell2entry_perm_(const NumericVector& cell, const IntegerVector& dim, const IntegerVector& perm);
static SEXP _gRbase_cell2entry_perm__try(SEXP cellSEXP, SEXP dimSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(cell2entry_perm_(cell, dim, perm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_cell2entry_perm_(SEXP cellSEXP, SEXP dimSEXP, SEXP permSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_cell2entry_perm__try(cellSEXP, dimSEXP, permSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// perm_cell_entries_
IntegerVector perm_cell_entries_(const IntegerVector& perm, const IntegerVector& dim);
static SEXP _gRbase_perm_cell_entries__try(SEXP permSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type perm(permSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_cell_entries_(perm, dim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_perm_cell_entries_(SEXP permSEXP, SEXP dimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_perm_cell_entries__try(permSEXP, dimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_perm_
SEXP tab_perm_(const SEXP& tab, const SEXP& perm);
static SEXP _gRbase_tab_perm__try(SEXP tabSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_perm_(tab, perm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_perm_(SEXP tabSEXP, SEXP permSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_perm__try(tabSEXP, permSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_expand_
SEXP tab_expand_(const SEXP& tab, const SEXP& aux, const int& type);
static SEXP _gRbase_tab_expand__try(SEXP tabSEXP, SEXP auxSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type aux(auxSEXP);
    Rcpp::traits::input_parameter< const int& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_expand_(tab, aux, type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_expand_(SEXP tabSEXP, SEXP auxSEXP, SEXP typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_expand__try(tabSEXP, auxSEXP, typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_align_
SEXP tab_align_(const SEXP& tab1, const SEXP& tab2);
static SEXP _gRbase_tab_align__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_align_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_align_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_align__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_marg2_
numVec tab_marg2_(const numVec tab1, const intVec marg);
static SEXP _gRbase_tab_marg2__try(SEXP tab1SEXP, SEXP margSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const numVec >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const intVec >::type marg(margSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_marg2_(tab1, marg));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_marg2_(SEXP tab1SEXP, SEXP margSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_marg2__try(tab1SEXP, margSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_marg_
SEXP tab_marg_(const SEXP& tab, const SEXP& marg);
static SEXP _gRbase_tab_marg__try(SEXP tabSEXP, SEXP margSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type marg(margSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_marg_(tab, marg));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_marg_(SEXP tabSEXP, SEXP margSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_marg__try(tabSEXP, margSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_op_
NumericVector tab_op_(const NumericVector& tab1, const NumericVector& tab2, const char op);
static SEXP _gRbase_tab_op__try(SEXP tab1SEXP, SEXP tab2SEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    Rcpp::traits::input_parameter< const char >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_op_(tab1, tab2, op));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_op_(SEXP tab1SEXP, SEXP tab2SEXP, SEXP opSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_op__try(tab1SEXP, tab2SEXP, opSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_add_
NumericVector tab_add_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP _gRbase_tab_add__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_add_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_add_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_add__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_subt_
NumericVector tab_subt_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP _gRbase_tab_subt__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_subt_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_subt_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_subt__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_mult_
NumericVector tab_mult_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP _gRbase_tab_mult__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_mult_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_mult_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_mult__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_div_
NumericVector tab_div_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP _gRbase_tab_div__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_div_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_div_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_div__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_div0_
NumericVector tab_div0_(const NumericVector& tab1, const NumericVector& tab2);
static SEXP _gRbase_tab_div0__try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tab_div0_(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_div0_(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_div0__try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_equal_
bool tab_equal_(const NumericVector& tab1, const NumericVector& tab2, double eps);
static SEXP _gRbase_tab_equal__try(SEXP tab1SEXP, SEXP tab2SEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_equal_(tab1, tab2, eps));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_equal_(SEXP tab1SEXP, SEXP tab2SEXP, SEXP epsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_equal__try(tab1SEXP, tab2SEXP, epsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_list_mult_
NumericVector tab_list_mult_(const List& lst);
static SEXP _gRbase_tab_list_mult__try(SEXP lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const List& >::type lst(lstSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_list_mult_(lst));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_list_mult_(SEXP lstSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_list_mult__try(lstSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tab_list_add_
NumericVector tab_list_add_(const List& lst);
static SEXP _gRbase_tab_list_add__try(SEXP lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const List& >::type lst(lstSEXP);
    rcpp_result_gen = Rcpp::wrap(tab_list_add_(lst));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tab_list_add_(SEXP lstSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tab_list_add__try(lstSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tabMarg__
SEXP tabMarg__(const SEXP& tab, const SEXP& marg);
static SEXP _gRbase_tabMarg___try(SEXP tabSEXP, SEXP margSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type marg(margSEXP);
    rcpp_result_gen = Rcpp::wrap(tabMarg__(tab, marg));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tabMarg__(SEXP tabSEXP, SEXP margSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tabMarg___try(tabSEXP, margSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tabDiv0__
NumericVector tabDiv0__(const NumericVector& tab1, const NumericVector& tab2);
static SEXP _gRbase_tabDiv0___try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tabDiv0__(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tabDiv0__(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tabDiv0___try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tabMult__
NumericVector tabMult__(const NumericVector& tab1, const NumericVector& tab2);
static SEXP _gRbase_tabMult___try(SEXP tab1SEXP, SEXP tab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tab2(tab2SEXP);
    rcpp_result_gen = Rcpp::wrap(tabMult__(tab1, tab2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_tabMult__(SEXP tab1SEXP, SEXP tab2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_tabMult___try(tab1SEXP, tab2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// MAT2ftM_
SEXP MAT2ftM_(SEXP XX_);
RcppExport SEXP _gRbase_MAT2ftM_(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(MAT2ftM_(XX_));
    return rcpp_result_gen;
END_RCPP
}
// symMAT2ftM_
SEXP symMAT2ftM_(SEXP XX_);
RcppExport SEXP _gRbase_symMAT2ftM_(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(symMAT2ftM_(XX_));
    return rcpp_result_gen;
END_RCPP
}
// unlist_chr__
CharacterVector unlist_chr__(const List& list);
static SEXP _gRbase_unlist_chr___try(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const List& >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(unlist_chr__(list));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_unlist_chr__(SEXP listSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_unlist_chr___try(listSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2tfList__
List adjList2tfList__(List LL);
static SEXP _gRbase_adjList2tfList___try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2tfList__(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_adjList2tfList__(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_adjList2tfList___try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2ftList__
List adjList2ftList__(List LL);
static SEXP _gRbase_adjList2ftList___try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2ftList__(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_adjList2ftList__(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_adjList2ftList___try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dagList2dgCMatrix__
SEXP dagList2dgCMatrix__(List LL, Nullable<CharacterVector> vn);
static SEXP _gRbase_dagList2dgCMatrix___try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type vn(vnSEXP);
    rcpp_result_gen = Rcpp::wrap(dagList2dgCMatrix__(LL, vn));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_dagList2dgCMatrix__(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_dagList2dgCMatrix___try(LLSEXP, vnSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dagList2matrix__
SEXP dagList2matrix__(List LL, Nullable<CharacterVector> vn);
static SEXP _gRbase_dagList2matrix___try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type vn(vnSEXP);
    rcpp_result_gen = Rcpp::wrap(dagList2matrix__(LL, vn));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_dagList2matrix__(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_dagList2matrix___try(LLSEXP, vnSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ugList2dgCMatrix__
SEXP ugList2dgCMatrix__(List LL, Nullable<CharacterVector> vn);
static SEXP _gRbase_ugList2dgCMatrix___try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type vn(vnSEXP);
    rcpp_result_gen = Rcpp::wrap(ugList2dgCMatrix__(LL, vn));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_ugList2dgCMatrix__(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_ugList2dgCMatrix___try(LLSEXP, vnSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ugList2matrix__
SEXP ugList2matrix__(List LL, Nullable<CharacterVector> vn);
static SEXP _gRbase_ugList2matrix___try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type vn(vnSEXP);
    rcpp_result_gen = Rcpp::wrap(ugList2matrix__(LL, vn));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_ugList2matrix__(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_ugList2matrix___try(LLSEXP, vnSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2ftM__
CharacterMatrix adjList2ftM__(List LL);
static SEXP _gRbase_adjList2ftM___try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2ftM__(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_adjList2ftM__(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_adjList2ftM___try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2tfM__
CharacterMatrix adjList2tfM__(List LL);
static SEXP _gRbase_adjList2tfM___try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2tfM__(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_adjList2tfM__(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_adjList2tfM___try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2matrix__
SEXP adjList2matrix__(List LL);
static SEXP _gRbase_adjList2matrix___try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2matrix__(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_adjList2matrix__(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_adjList2matrix___try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// adjList2dgCMatrix__
SEXP adjList2dgCMatrix__(List LL);
static SEXP _gRbase_adjList2dgCMatrix___try(SEXP LLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type LL(LLSEXP);
    rcpp_result_gen = Rcpp::wrap(adjList2dgCMatrix__(LL));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_adjList2dgCMatrix__(SEXP LLSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_adjList2dgCMatrix___try(LLSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// M2dgCMatrix__
SEXP M2dgCMatrix__(SEXP XX_);
RcppExport SEXP _gRbase_M2dgCMatrix__(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(M2dgCMatrix__(XX_));
    return rcpp_result_gen;
END_RCPP
}
// M2matrix__
SEXP M2matrix__(SEXP XX_);
RcppExport SEXP _gRbase_M2matrix__(SEXP XX_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP);
    rcpp_result_gen = Rcpp::wrap(M2matrix__(XX_));
    return rcpp_result_gen;
END_RCPP
}
// which_matrix_index__
SEXP which_matrix_index__(SEXP X);
RcppExport SEXP _gRbase_which_matrix_index__(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(which_matrix_index__(X));
    return rcpp_result_gen;
END_RCPP
}
// rowmat2list__
SEXP rowmat2list__(SEXP X);
RcppExport SEXP _gRbase_rowmat2list__(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(rowmat2list__(X));
    return rcpp_result_gen;
END_RCPP
}
// colmat2list__
SEXP colmat2list__(SEXP X);
RcppExport SEXP _gRbase_colmat2list__(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(colmat2list__(X));
    return rcpp_result_gen;
END_RCPP
}
// issymMAT_
bool issymMAT_(SEXP A_);
RcppExport SEXP _gRbase_issymMAT_(SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(issymMAT_(A_));
    return rcpp_result_gen;
END_RCPP
}
// isugMAT_
bool isugMAT_(SEXP A_);
RcppExport SEXP _gRbase_isugMAT_(SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(isugMAT_(A_));
    return rcpp_result_gen;
END_RCPP
}
// isadjMAT_
bool isadjMAT_(SEXP A_);
RcppExport SEXP _gRbase_isadjMAT_(SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(isadjMAT_(A_));
    return rcpp_result_gen;
END_RCPP
}
// isdagMAT_
bool isdagMAT_(SEXP A_);
RcppExport SEXP _gRbase_isdagMAT_(SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(isdagMAT_(A_));
    return rcpp_result_gen;
END_RCPP
}
// which_
IntegerVector which_(SEXP x);
static SEXP _gRbase_which__try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_which_(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_which__try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_superset_
IntegerVector get_superset_(CharacterVector x, List setlist, bool all);
static SEXP _gRbase_get_superset__try(SEXP xSEXP, SEXP setlistSEXP, SEXP allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type setlist(setlistSEXP);
    Rcpp::traits::input_parameter< bool >::type all(allSEXP);
    rcpp_result_gen = Rcpp::wrap(get_superset_(x, setlist, all));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_get_superset_(SEXP xSEXP, SEXP setlistSEXP, SEXP allSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_get_superset__try(xSEXP, setlistSEXP, allSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_subset_
IntegerVector get_subset_(CharacterVector x, List setlist, bool all);
static SEXP _gRbase_get_subset__try(SEXP xSEXP, SEXP setlistSEXP, SEXP allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type setlist(setlistSEXP);
    Rcpp::traits::input_parameter< bool >::type all(allSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subset_(x, setlist, all));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_get_subset_(SEXP xSEXP, SEXP setlistSEXP, SEXP allSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_get_subset__try(xSEXP, setlistSEXP, allSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// is_subsetof_
bool is_subsetof_(SEXP set, SEXP set2);
static SEXP _gRbase_is_subsetof__try(SEXP setSEXP, SEXP set2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type set(setSEXP);
    Rcpp::traits::input_parameter< SEXP >::type set2(set2SEXP);
    rcpp_result_gen = Rcpp::wrap(is_subsetof_(set, set2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_is_subsetof_(SEXP setSEXP, SEXP set2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_is_subsetof__try(setSEXP, set2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// allSubsets0_
List allSubsets0_(const IntegerVector& x);
static SEXP _gRbase_allSubsets0__try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(allSubsets0_(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_allSubsets0_(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_allSubsets0__try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// allSubsets_
SEXP allSubsets_(SEXP& x);
static SEXP _gRbase_allSubsets__try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(allSubsets_(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_allSubsets_(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_allSubsets__try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// all_pairs__
SEXP all_pairs__(CharacterVector x, CharacterVector y, bool sort, std::string result);
static SEXP _gRbase_all_pairs___try(SEXP xSEXP, SEXP ySEXP, SEXP sortSEXP, SEXP resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type sort(sortSEXP);
    Rcpp::traits::input_parameter< std::string >::type result(resultSEXP);
    rcpp_result_gen = Rcpp::wrap(all_pairs__(x, y, sort, result));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_all_pairs__(SEXP xSEXP, SEXP ySEXP, SEXP sortSEXP, SEXP resultSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_all_pairs___try(xSEXP, ySEXP, sortSEXP, resultSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_set_
SEXP max_set_(const List L, bool index);
static SEXP _gRbase_max_set__try(SEXP LSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const List >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(max_set_(L, index));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_max_set_(SEXP LSEXP, SEXP indexSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_max_set__try(LSEXP, indexSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// min_set_
SEXP min_set_(const List L, bool index);
static SEXP _gRbase_min_set__try(SEXP LSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const List >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(min_set_(L, index));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_min_set_(SEXP LSEXP, SEXP indexSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_min_set__try(LSEXP, indexSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// isin_
SEXP isin_(List L, SEXP set, bool index);
static SEXP _gRbase_isin__try(SEXP LSEXP, SEXP setSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    Rcpp::traits::input_parameter< SEXP >::type set(setSEXP);
    Rcpp::traits::input_parameter< bool >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(isin_(L, set, index));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_isin_(SEXP LSEXP, SEXP setSEXP, SEXP indexSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_isin__try(LSEXP, setSEXP, indexSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// is_dimnames_
bool is_dimnames_(const SEXP& obj);
RcppExport SEXP _gRbase_is_dimnames_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(is_dimnames_(obj));
    return rcpp_result_gen;
END_RCPP
}
// is_number_vector_
bool is_number_vector_(const SEXP& obj);
RcppExport SEXP _gRbase_is_number_vector_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(is_number_vector_(obj));
    return rcpp_result_gen;
END_RCPP
}
// is_named_array_
bool is_named_array_(const SEXP& obj);
RcppExport SEXP _gRbase_is_named_array_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(is_named_array_(obj));
    return rcpp_result_gen;
END_RCPP
}
// dimnames_match_
bool dimnames_match_(const SEXP& tab1, const SEXP& tab2, bool verbose);
RcppExport SEXP _gRbase_dimnames_match_(SEXP tab1SEXP, SEXP tab2SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tab1(tab1SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type tab2(tab2SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(dimnames_match_(tab1, tab2, verbose));
    return rcpp_result_gen;
END_RCPP
}
// choose_
int choose_(int N, int K);
static SEXP _gRbase_choose__try(SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(choose_(N, K));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_choose_(SEXP NSEXP, SEXP KSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_choose__try(NSEXP, KSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// do_combn
IntegerMatrix do_combn(int N, int K);
static SEXP _gRbase_do_combn_try(SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(do_combn(N, K));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_do_combn(SEXP NSEXP, SEXP KSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_do_combn_try(NSEXP, KSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// next_perm_
void next_perm_(IntegerVector& vv);
static SEXP _gRbase_next_perm__try(SEXP vvSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< IntegerVector& >::type vv(vvSEXP);
    next_perm_(vv);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRbase_next_perm_(SEXP vvSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRbase_next_perm__try(vvSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// solveSPD
SEXP solveSPD(arma::mat X);
RcppExport SEXP _gRbase_solveSPD(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(solveSPD(X));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _gRbase_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*rip_internal)(IntegerVector,CharacterVector,List)");
        signatures.insert("SEXP(*getCliquesDec__)(SEXP,SEXP)");
        signatures.insert("int(*cell2entry_)(const NumericVector&,const IntegerVector&)");
        signatures.insert("IntegerVector(*make_plevels_)(const IntegerVector&)");
        signatures.insert("IntegerVector(*entry2cell_)(const int&,const IntegerVector&)");
        signatures.insert("NumericVector(*next_cell_)(const NumericVector&,const IntegerVector&)");
        signatures.insert("void(*next_cell2_)(IntegerVector&,const IntegerVector&)");
        signatures.insert("NumericVector(*next_cell_slice_)(const NumericVector&,const IntegerVector&,const IntegerVector&)");
        signatures.insert("IntegerVector(*slice2entry_)(const IntegerVector&,const IntegerVector&,const IntegerVector&)");
        signatures.insert("int(*cell2entry_perm_)(const NumericVector&,const IntegerVector&,const IntegerVector&)");
        signatures.insert("IntegerVector(*perm_cell_entries_)(const IntegerVector&,const IntegerVector&)");
        signatures.insert("SEXP(*tab_perm_)(const SEXP&,const SEXP&)");
        signatures.insert("SEXP(*tab_expand_)(const SEXP&,const SEXP&,const int&)");
        signatures.insert("SEXP(*tab_align_)(const SEXP&,const SEXP&)");
        signatures.insert("numVec(*tab_marg2_)(const numVec,const intVec)");
        signatures.insert("SEXP(*tab_marg_)(const SEXP&,const SEXP&)");
        signatures.insert("NumericVector(*tab_op_)(const NumericVector&,const NumericVector&,const char)");
        signatures.insert("NumericVector(*tab_add_)(const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*tab_subt_)(const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*tab_mult_)(const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*tab_div_)(const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*tab_div0_)(const NumericVector&,const NumericVector&)");
        signatures.insert("bool(*tab_equal_)(const NumericVector&,const NumericVector&,double)");
        signatures.insert("NumericVector(*tab_list_mult_)(const List&)");
        signatures.insert("NumericVector(*tab_list_add_)(const List&)");
        signatures.insert("SEXP(*tabMarg__)(const SEXP&,const SEXP&)");
        signatures.insert("NumericVector(*tabDiv0__)(const NumericVector&,const NumericVector&)");
        signatures.insert("NumericVector(*tabMult__)(const NumericVector&,const NumericVector&)");
        signatures.insert("CharacterVector(*unlist_chr__)(const List&)");
        signatures.insert("List(*adjList2tfList__)(List)");
        signatures.insert("List(*adjList2ftList__)(List)");
        signatures.insert("SEXP(*dagList2dgCMatrix__)(List,Nullable<CharacterVector>)");
        signatures.insert("SEXP(*dagList2matrix__)(List,Nullable<CharacterVector>)");
        signatures.insert("SEXP(*ugList2dgCMatrix__)(List,Nullable<CharacterVector>)");
        signatures.insert("SEXP(*ugList2matrix__)(List,Nullable<CharacterVector>)");
        signatures.insert("CharacterMatrix(*adjList2ftM__)(List)");
        signatures.insert("CharacterMatrix(*adjList2tfM__)(List)");
        signatures.insert("SEXP(*adjList2matrix__)(List)");
        signatures.insert("SEXP(*adjList2dgCMatrix__)(List)");
        signatures.insert("IntegerVector(*which_)(SEXP)");
        signatures.insert("IntegerVector(*get_superset_)(CharacterVector,List,bool)");
        signatures.insert("IntegerVector(*get_subset_)(CharacterVector,List,bool)");
        signatures.insert("bool(*is_subsetof_)(SEXP,SEXP)");
        signatures.insert("List(*allSubsets0_)(const IntegerVector&)");
        signatures.insert("SEXP(*allSubsets_)(SEXP&)");
        signatures.insert("SEXP(*all_pairs__)(CharacterVector,CharacterVector,bool,std::string)");
        signatures.insert("SEXP(*max_set_)(const List,bool)");
        signatures.insert("SEXP(*min_set_)(const List,bool)");
        signatures.insert("SEXP(*isin_)(List,SEXP,bool)");
        signatures.insert("int(*choose_)(int,int)");
        signatures.insert("IntegerMatrix(*do_combn)(int,int)");
        signatures.insert("void(*next_perm_)(IntegerVector&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _gRbase_RcppExport_registerCCallable() { 
    R_RegisterCCallable("gRbase", "_gRbase_rip_internal", (DL_FUNC)_gRbase_rip_internal_try);
    R_RegisterCCallable("gRbase", "_gRbase_getCliquesDec__", (DL_FUNC)_gRbase_getCliquesDec___try);
    R_RegisterCCallable("gRbase", "_gRbase_cell2entry_", (DL_FUNC)_gRbase_cell2entry__try);
    R_RegisterCCallable("gRbase", "_gRbase_make_plevels_", (DL_FUNC)_gRbase_make_plevels__try);
    R_RegisterCCallable("gRbase", "_gRbase_entry2cell_", (DL_FUNC)_gRbase_entry2cell__try);
    R_RegisterCCallable("gRbase", "_gRbase_next_cell_", (DL_FUNC)_gRbase_next_cell__try);
    R_RegisterCCallable("gRbase", "_gRbase_next_cell2_", (DL_FUNC)_gRbase_next_cell2__try);
    R_RegisterCCallable("gRbase", "_gRbase_next_cell_slice_", (DL_FUNC)_gRbase_next_cell_slice__try);
    R_RegisterCCallable("gRbase", "_gRbase_slice2entry_", (DL_FUNC)_gRbase_slice2entry__try);
    R_RegisterCCallable("gRbase", "_gRbase_cell2entry_perm_", (DL_FUNC)_gRbase_cell2entry_perm__try);
    R_RegisterCCallable("gRbase", "_gRbase_perm_cell_entries_", (DL_FUNC)_gRbase_perm_cell_entries__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_perm_", (DL_FUNC)_gRbase_tab_perm__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_expand_", (DL_FUNC)_gRbase_tab_expand__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_align_", (DL_FUNC)_gRbase_tab_align__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_marg2_", (DL_FUNC)_gRbase_tab_marg2__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_marg_", (DL_FUNC)_gRbase_tab_marg__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_op_", (DL_FUNC)_gRbase_tab_op__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_add_", (DL_FUNC)_gRbase_tab_add__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_subt_", (DL_FUNC)_gRbase_tab_subt__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_mult_", (DL_FUNC)_gRbase_tab_mult__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_div_", (DL_FUNC)_gRbase_tab_div__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_div0_", (DL_FUNC)_gRbase_tab_div0__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_equal_", (DL_FUNC)_gRbase_tab_equal__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_list_mult_", (DL_FUNC)_gRbase_tab_list_mult__try);
    R_RegisterCCallable("gRbase", "_gRbase_tab_list_add_", (DL_FUNC)_gRbase_tab_list_add__try);
    R_RegisterCCallable("gRbase", "_gRbase_tabMarg__", (DL_FUNC)_gRbase_tabMarg___try);
    R_RegisterCCallable("gRbase", "_gRbase_tabDiv0__", (DL_FUNC)_gRbase_tabDiv0___try);
    R_RegisterCCallable("gRbase", "_gRbase_tabMult__", (DL_FUNC)_gRbase_tabMult___try);
    R_RegisterCCallable("gRbase", "_gRbase_unlist_chr__", (DL_FUNC)_gRbase_unlist_chr___try);
    R_RegisterCCallable("gRbase", "_gRbase_adjList2tfList__", (DL_FUNC)_gRbase_adjList2tfList___try);
    R_RegisterCCallable("gRbase", "_gRbase_adjList2ftList__", (DL_FUNC)_gRbase_adjList2ftList___try);
    R_RegisterCCallable("gRbase", "_gRbase_dagList2dgCMatrix__", (DL_FUNC)_gRbase_dagList2dgCMatrix___try);
    R_RegisterCCallable("gRbase", "_gRbase_dagList2matrix__", (DL_FUNC)_gRbase_dagList2matrix___try);
    R_RegisterCCallable("gRbase", "_gRbase_ugList2dgCMatrix__", (DL_FUNC)_gRbase_ugList2dgCMatrix___try);
    R_RegisterCCallable("gRbase", "_gRbase_ugList2matrix__", (DL_FUNC)_gRbase_ugList2matrix___try);
    R_RegisterCCallable("gRbase", "_gRbase_adjList2ftM__", (DL_FUNC)_gRbase_adjList2ftM___try);
    R_RegisterCCallable("gRbase", "_gRbase_adjList2tfM__", (DL_FUNC)_gRbase_adjList2tfM___try);
    R_RegisterCCallable("gRbase", "_gRbase_adjList2matrix__", (DL_FUNC)_gRbase_adjList2matrix___try);
    R_RegisterCCallable("gRbase", "_gRbase_adjList2dgCMatrix__", (DL_FUNC)_gRbase_adjList2dgCMatrix___try);
    R_RegisterCCallable("gRbase", "_gRbase_which_", (DL_FUNC)_gRbase_which__try);
    R_RegisterCCallable("gRbase", "_gRbase_get_superset_", (DL_FUNC)_gRbase_get_superset__try);
    R_RegisterCCallable("gRbase", "_gRbase_get_subset_", (DL_FUNC)_gRbase_get_subset__try);
    R_RegisterCCallable("gRbase", "_gRbase_is_subsetof_", (DL_FUNC)_gRbase_is_subsetof__try);
    R_RegisterCCallable("gRbase", "_gRbase_allSubsets0_", (DL_FUNC)_gRbase_allSubsets0__try);
    R_RegisterCCallable("gRbase", "_gRbase_allSubsets_", (DL_FUNC)_gRbase_allSubsets__try);
    R_RegisterCCallable("gRbase", "_gRbase_all_pairs__", (DL_FUNC)_gRbase_all_pairs___try);
    R_RegisterCCallable("gRbase", "_gRbase_max_set_", (DL_FUNC)_gRbase_max_set__try);
    R_RegisterCCallable("gRbase", "_gRbase_min_set_", (DL_FUNC)_gRbase_min_set__try);
    R_RegisterCCallable("gRbase", "_gRbase_isin_", (DL_FUNC)_gRbase_isin__try);
    R_RegisterCCallable("gRbase", "_gRbase_choose_", (DL_FUNC)_gRbase_choose__try);
    R_RegisterCCallable("gRbase", "_gRbase_do_combn", (DL_FUNC)_gRbase_do_combn_try);
    R_RegisterCCallable("gRbase", "_gRbase_next_perm_", (DL_FUNC)_gRbase_next_perm__try);
    R_RegisterCCallable("gRbase", "_gRbase_RcppExport_validate", (DL_FUNC)_gRbase_RcppExport_validate);
    return R_NilValue;
}
